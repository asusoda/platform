name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: poetry install --no-interaction --no-root

    - name: Run tests
      run: |
        poetry run pytest -v
      continue-on-error: true  # Don't fail the build on test failures for now

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: |
        docker compose build --no-cache
        
    - name: Run Docker image smoke test
      run: |
        # Start the container
        docker compose up -d
        
        # Wait for it to be ready
        sleep 10
        
        # Check if it's running
        docker compose ps
        
        # Stop it
        docker compose down

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: Deploy via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        port: ${{ secrets.VPS_SSH_PORT }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          set -e
          PROJECT_DIR="${PROJECT_DIR:-/var/web/soda-internal-api}"
          cd "$PROJECT_DIR"
          make deploy PROJECT_DIR="$PROJECT_DIR"