# "hi! @officers, here's the ..."

# filepath: /home/ash/student_orgs/SoDA/soda-marketing-bot/send_message.py
import requests
import json
from datetime import datetime

def format_discord_message(event, content, editor_url):
    """
    Format a nice looking Discord message with event details and editor link
    
    Args:
        event (dict): Event information
        content (dict): Generated content with discord/instagram text
        editor_url (str): URL to the GrapesJS editor
        
    Returns:
        str: Formatted message for Discord
    """
    
    # Add editor link to the message - now using event-specific URL
    editor_section = f"""---
    [Edit this banner here]({editor_url})
    ---
    """
    try:
        date_obj = datetime.fromisoformat(event['date'].replace('Z', '+00:00'))
        format_event_date = date_obj.strftime("%A, %B %d, %Y at %I:%M %p")
    except (ValueError, KeyError):
        formatted_date = event.get('date', 'TBD')
            
    # Use discord content if available, otherwise create a generic message
    if content and "text" in content:
        message = f"""
        # üì£ **{event['name']}**

        {content['text']}
        
        üìÖ **Date:** {format_event_date(event['date'])}
        üìç **Location:** {event['location']}
        """
    else:
        # Format date nicely
        try:
            date_obj = datetime.fromisoformat(event['date'].replace('Z', '+00:00'))
            formatted_date = date_obj.strftime("%A, %B %d, %Y at %I:%M %p")
        except (ValueError, KeyError):
            formatted_date = event.get('date', 'TBD')
            
        message = f"""
        # üì£ **{event['name']}**

        Hey SoDA members!

        Join us for an exciting event:

        üìÖ **Date:** {formatted_date}
        üìç **Location:** {event['location']}

        {event['info']}

        See you there! Don't forget to RSVP.
        """
            
    
    return f"{message}\n{editor_section}"

def send_discord_webhook(webhook_url, message, event_name="SoDA Event"):
    """
    Send a message to Discord via webhook
    
    Args:
        webhook_url (str): Discord webhook URL
        message (str): Message content to send
        event_name (str): Name of the event for the embed title
        
    Returns:
        dict: Response status and details
    """
    if not webhook_url:
        return {
            "success": False,
            "message": "No webhook URL provided"
        }
    
    payload = {
        "content": f"<@&OFFICER_ROLE_ID> Hey officers! We have an upcoming event that needs marketing.",
        "embeds": [
            {
                "title": f"",
                "description": message,
                "color": 0x9B59B6,  # Purple color
                "footer": {
                    "text": "Generated by SoDA Marketing Bot"
                }
            }
        ],
        "allowed_mentions": {
            "parse": ["roles"]
        }
    }
    
    try:
        response = requests.post(
            webhook_url,
            headers={"Content-Type": "application/json"},
            data=json.dumps(payload),
            timeout=10
        )
        
        if response.status_code == 204:  # Discord returns 204 No Content on success
            return {
                "success": True,
                "message": "Message sent to Discord successfully"
            }
        else:
            error_info = response.text if response.text else f"Status code: {response.status_code}"
            return {
                "success": False,
                "message": f"Failed to send message to Discord: {error_info}"
            }
    except Exception as e:
        return {
            "success": False,
            "message": f"Exception when sending to Discord: {str(e)}"
        }
   
def send_officer_notification(event, content, editor_url, webhook_url=None):
    """
    Send notification about an event to Discord
    
    Args:
        event (dict): Event information
        content (dict): Generated content
        editor_url (str): URL to the GrapesJS editor
        webhook_url (str): Discord webhook URL (defaults to environment variable)
    
    Returns:
        dict: Response status and details
    """            
    # Format the message
    message = format_discord_message(event, content, editor_url)
    
    # Send to Discord
    return send_discord_webhook(webhook_url, message, event.get("name", "SoDA Event"))
